int pivo(int *arr,int n)
{
    int s=0;
    int e=n-1;
    while(s<e)
    {
        int mid=s+(e-s)/2;
        if(arr[mid]>=arr[0])
        {
            s=mid+1;
        }
        else{
            e=mid;
        }
    }
    return e;
}
int binary(int *arr,int st,int ed,int k)
{
    int s=st;
    int e=ed;
    
    while(s<=e)
    {
        int mid=s+(e-s)/2;
        if(arr[mid]==k)
        {
            return mid;
        }
        else if(arr[mid]>k)
        {
            e=mid-1;
        }
        else
        {
            s=mid+1;
        }
    }
    return -1;
}
int search(int* arr, int n, int key) {
    // int piv=pivo(arr,n);
    // if(key>=arr[piv] && key<=arr[n-1])
    // {
    //     return binary(arr,piv,n-1,key);
    // }
    // else
    // {
    //     return binary(arr, 0,piv,key);
    // }

    //approach 2nd 

    int s=0;
    int e=n-1;
    
    while(s<=e)
    {
        int mid=s+(e-s)/2;
        if(arr[mid]==key)
        {
            return mid;
        }
        if(arr[mid]>=arr[s])
        {
           if(key>=arr[s] && key<arr[mid])
           {
               e=mid-1;
           }
           else{
               s=mid+1;
           }
        }
        else if(arr[s]>=arr[mid] )
        {
            if(key>arr[mid] && key<=arr[e])
            {
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
    }
    return -1;


}
